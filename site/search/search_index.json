{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Android Application Moderation Module For the open source project visit github.com . Welcome to the documentation for the Android Application Moderation Module. This comprehensive resource will guide you through integrating our module into your Android app, providing powerful message moderation capabilities. With clear instructions and code examples, you'll be able to ensure a safe and secure user experience. From API key setup to customization options, this documentation covers everything you need to get started. \ud83d\udccb Requirements In order to get started follow this simple setup guide. After you finish, follow the initialization instructions provided in the documentation. You will need to have the following Android studio (gradle 7.3.0 is recommended) Account on OpenAI for API \ud83d\udddd\ufe0f Getting an API key Get your OpenAI API key from: https://platform.openai.com/account/api-keys . The importance of API keys API keys plays a major role in the field of software. API (Application programming interface) is the way to pass JSON objects between servers. That is essentialy something that your application need to do many times, but you will not be able to see it as it is happenning behind the scenes. When talking about OpenAI API keys, you will get one free but only with 3 requests per minutes, therefore it is highly recommended to set up a billing plan and have the API key set up from the API panel. After you setup the plan, you can enter the provided link and generate a new key. Note that your key will be visible only when it is generated, therefore it is important you will copy and keep it safe until you add it to your application. View usages It's highly recommended that you keep track of your API costs on the Usage page. You can also set limits on how much you spend on the Usage limits page.","title":"Welcome"},{"location":"#welcome-to-android-application-moderation-module","text":"For the open source project visit github.com . Welcome to the documentation for the Android Application Moderation Module. This comprehensive resource will guide you through integrating our module into your Android app, providing powerful message moderation capabilities. With clear instructions and code examples, you'll be able to ensure a safe and secure user experience. From API key setup to customization options, this documentation covers everything you need to get started.","title":"Welcome to Android Application Moderation Module"},{"location":"#requirements","text":"In order to get started follow this simple setup guide. After you finish, follow the initialization instructions provided in the documentation. You will need to have the following Android studio (gradle 7.3.0 is recommended) Account on OpenAI for API","title":"\ud83d\udccb Requirements"},{"location":"#getting-an-api-key","text":"Get your OpenAI API key from: https://platform.openai.com/account/api-keys .","title":"\ud83d\udddd\ufe0f Getting an API key"},{"location":"customization/","text":"Customization The module provides customization options to tailor the moderation process according to your specific requirements. You can modify the weights assigned to different harassment types, adjust the flagging bar threshold, and access specific results for each type. To add weights to the harassment types, use the addWeight() function. You can set a multiplication factor to the given result, enabling you to track and flag specific types more effectively. Recommended weights can range from 1.5 for detecting minor harassments to higher values like 1000 for harder-to-detect harassments. Additionally, you can set the flagging bar using the setFlaggingBar() function. The flag is raised when a response for a type exceeds the flagging bar threshold. By adjusting this threshold, you can control the tolerance for flagging messages. For example, setting the bar to 0.75 will result in a lower tolerance for flagging. To retrieve specific type results, use the getResultByType() function, which allows you to obtain the result for a particular harassment type from the moderation response. You can also check if a specific type is flagged using the isFlaggedByType() function. By utilizing these customization options, you can create a tailored moderator for your application messages, ensuring efficient and effective moderation. Example: // Set weights and flagging bar moderator.addWeight(HarassmentType.HATE, 1.2) .addWeight(HarassmentType.SELF_HARM, 1.5) .setFlaggingBar(0.75); // Button listener checking for hate content button.setOnClickListener(l -> { String text = editText.getText().toString().trim(); moderator.send(text, new Callback() { @Override public void onResponse(Response response) { if (moderator.isFlaggedByType(HarassmentType.HATE, response)) { // Perform actions for flagged hate content } else { // Perform actions for non-flagged content } } @Override public void onFailure(Exception error) { Log.e(\"Error\", error.getMessage()); } }); }); For more information on the moderation API and its capabilities, refer to the OpenAI Moderation API documentation . With these customization features, you can fine-tune the moderation process and handle different types of harassment according to your application's needs.","title":"Customization"},{"location":"customization/#customization","text":"The module provides customization options to tailor the moderation process according to your specific requirements. You can modify the weights assigned to different harassment types, adjust the flagging bar threshold, and access specific results for each type. To add weights to the harassment types, use the addWeight() function. You can set a multiplication factor to the given result, enabling you to track and flag specific types more effectively. Recommended weights can range from 1.5 for detecting minor harassments to higher values like 1000 for harder-to-detect harassments. Additionally, you can set the flagging bar using the setFlaggingBar() function. The flag is raised when a response for a type exceeds the flagging bar threshold. By adjusting this threshold, you can control the tolerance for flagging messages. For example, setting the bar to 0.75 will result in a lower tolerance for flagging. To retrieve specific type results, use the getResultByType() function, which allows you to obtain the result for a particular harassment type from the moderation response. You can also check if a specific type is flagged using the isFlaggedByType() function. By utilizing these customization options, you can create a tailored moderator for your application messages, ensuring efficient and effective moderation. Example: // Set weights and flagging bar moderator.addWeight(HarassmentType.HATE, 1.2) .addWeight(HarassmentType.SELF_HARM, 1.5) .setFlaggingBar(0.75); // Button listener checking for hate content button.setOnClickListener(l -> { String text = editText.getText().toString().trim(); moderator.send(text, new Callback() { @Override public void onResponse(Response response) { if (moderator.isFlaggedByType(HarassmentType.HATE, response)) { // Perform actions for flagged hate content } else { // Perform actions for non-flagged content } } @Override public void onFailure(Exception error) { Log.e(\"Error\", error.getMessage()); } }); }); For more information on the moderation API and its capabilities, refer to the OpenAI Moderation API documentation . With these customization features, you can fine-tune the moderation process and handle different types of harassment according to your application's needs.","title":"Customization"},{"location":"get_started/","text":"Get Started This tutorial will guide you through the process of integrating and using the Moderator module in your Android application. By following these steps, you will be able to moderate user inputs and handle the responses accordingly. Add dependencies Make sure you have added the necessary dependencies for the Moderator module in your app-level build.gradle file. Follow this simple setup guide for instruction. Initialize Moderator In your MainActivity class, import the necessary classes and inject the Moderator instance. EditText editText; Button button; Moderator moderator; @Inject @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); moderator = Moderator.get(this); editText = findViewById(R.id.editTextText); button = findViewById(R.id.button); } Implement Button Click Listener button.setOnClickListener(l -> { // given text String text = editText.getText().toString().trim(); // send to a moderator moderator.send(text, new Callback() { @Override public void onResponse(Response response) { if ( response.getResults().isFlagged() ){ // the message is flagged as inappropriate } // send the message as the routine is finished } @Override public void onFailure(Exception error) { Log.e(\"Error\", error.getMessage()); } }); }); Customize Handling of Response In the onResponse() method of the Callback, you can customize the actions to be taken based on the moderation response. Handle the flagged message or proceed with the routine based on the moderation results. By following these steps, you have successfully integrated the Moderator module into your application and implemented the logic to send user inputs for moderation. Customize the response handling as per your application's requirements. Note: The Response object should be imported from moderation module, not to be confused with other modules. Advanced Usage: Handling Extra Cases Modify the onResponse() method Inside the onResponse() method of the Callback, add the necessary logic to handle different cases based on the type of harassment and the severity of the violation. moderator.send(text, new Callback() { @Override public void onResponse(Response response) { if ( response.getResults().isFlagged() ){ // the message is flagged as inappropriate }else{ HarassmentType violatedType = HarassmentType.HATE_THREATENING; if (violatedType == null) { return; } double violationScore = Moderator.get(getBaseContext()).getResultByType(violatedType, response); if (violationScore >= 0.3) { // Perform actions when the message is considered highly disturbing showMessage(\"This message is highly disturbing. Take appropriate action.\"); } else if (violationScore >= 0.2) { // Perform actions when the message should be warned showMessage(\"This message should be warned. Proceed with caution.\"); } else { // Perform actions when the message is considered legitimate showMessage(\"This message is legitimate. No action required.\"); } } // send the message as the routine is finished } @Override public void onFailure(Exception error) { Log.e(\"Error\", error.getMessage()); } }); Customize the Actions Modify the code within each if block to include the specific actions you want to perform based on the severity of the violation. For example, you might display different alert messages, apply specific filters, or take appropriate actions based on the severity level. Conclusion By incorporating the additional checks based on the type of harassment and the severity of the violation, you can handle different cases and take specific actions accordingly. This allows for more nuanced handling of messages based on the moderation results.","title":"Get started"},{"location":"get_started/#get-started","text":"This tutorial will guide you through the process of integrating and using the Moderator module in your Android application. By following these steps, you will be able to moderate user inputs and handle the responses accordingly.","title":"Get Started"},{"location":"get_started/#add-dependencies","text":"Make sure you have added the necessary dependencies for the Moderator module in your app-level build.gradle file. Follow this simple setup guide for instruction.","title":"Add dependencies"},{"location":"get_started/#initialize-moderator","text":"In your MainActivity class, import the necessary classes and inject the Moderator instance. EditText editText; Button button; Moderator moderator; @Inject @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); moderator = Moderator.get(this); editText = findViewById(R.id.editTextText); button = findViewById(R.id.button); }","title":"Initialize Moderator"},{"location":"get_started/#implement-button-click-listener","text":"button.setOnClickListener(l -> { // given text String text = editText.getText().toString().trim(); // send to a moderator moderator.send(text, new Callback() { @Override public void onResponse(Response response) { if ( response.getResults().isFlagged() ){ // the message is flagged as inappropriate } // send the message as the routine is finished } @Override public void onFailure(Exception error) { Log.e(\"Error\", error.getMessage()); } }); });","title":"Implement Button Click Listener"},{"location":"get_started/#customize-handling-of-response","text":"In the onResponse() method of the Callback, you can customize the actions to be taken based on the moderation response. Handle the flagged message or proceed with the routine based on the moderation results. By following these steps, you have successfully integrated the Moderator module into your application and implemented the logic to send user inputs for moderation. Customize the response handling as per your application's requirements. Note: The Response object should be imported from moderation module, not to be confused with other modules.","title":"Customize Handling of Response"},{"location":"get_started/#advanced-usage-handling-extra-cases","text":"","title":"Advanced Usage: Handling Extra Cases"},{"location":"get_started/#modify-the-onresponse-method","text":"Inside the onResponse() method of the Callback, add the necessary logic to handle different cases based on the type of harassment and the severity of the violation. moderator.send(text, new Callback() { @Override public void onResponse(Response response) { if ( response.getResults().isFlagged() ){ // the message is flagged as inappropriate }else{ HarassmentType violatedType = HarassmentType.HATE_THREATENING; if (violatedType == null) { return; } double violationScore = Moderator.get(getBaseContext()).getResultByType(violatedType, response); if (violationScore >= 0.3) { // Perform actions when the message is considered highly disturbing showMessage(\"This message is highly disturbing. Take appropriate action.\"); } else if (violationScore >= 0.2) { // Perform actions when the message should be warned showMessage(\"This message should be warned. Proceed with caution.\"); } else { // Perform actions when the message is considered legitimate showMessage(\"This message is legitimate. No action required.\"); } } // send the message as the routine is finished } @Override public void onFailure(Exception error) { Log.e(\"Error\", error.getMessage()); } });","title":"Modify the onResponse() method"},{"location":"get_started/#customize-the-actions","text":"Modify the code within each if block to include the specific actions you want to perform based on the severity of the violation. For example, you might display different alert messages, apply specific filters, or take appropriate actions based on the severity level.","title":"Customize the Actions"},{"location":"get_started/#conclusion","text":"By incorporating the additional checks based on the type of harassment and the severity of the violation, you can handle different cases and take specific actions accordingly. This allows for more nuanced handling of messages based on the moderation results.","title":"Conclusion"},{"location":"setup/","text":"Setting up the module Welcome to the module setup guide! This resource's puprpose is to provide step-by-step instructions to quickly implement the module into your project. Enhance functionality, improve user experience, and streamline workflows with ease. For the latest module release, please visit github.com . Setting up with gradle Add the module to your project next to the application folder, and add the following line of code to the grade.build file. dependencies { implementation project(':moderation') ... } Initialization Initialization from Application Create an App class that extends AppParent. public class App extends AppParent { // Class implementation goes here } Implement the function to return the API key. public class App extends AppParent { // Other class methods and configurations /** * Retrieves the API key. * * @return The API key. */ public static String getApiKey() { // TODO: Implement the logic to retrieve the API key return \"YOUR_API_KEY\"; } } Replace \"YOUR_API_KEY\" with the actual implementation to fetch the API key dynamically. Initialization from MainActivity In your MainActivity class, import the necessary classes. Inside the onCreate() method of MainActivity, initialize the module and retrieve the API key. Moderator moderator; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); // Other initialization code // Initialize the module moderator = Moderator.get(this); // Retrieve the API key from the App class String apiKey = \"YOUR_API_KEY\"; // Set the API key in the module moderator.setOpenaiApiKey(apiKey); } Setting the API key from build config Setting the api key from a BuildConfig is a good practice to ensure a more secured credentials. To set the API key from a BuildConfig class, follow these steps: Open your module's build.gradle file. Inside the android block, add a buildConfigField to define the API key as a build configuration field. android { defaultConfig { ... buildConfigField(\"String\", \"API_KEY\", \"\\\"YOUR_API_KEY\\\"\") } } Replace \"YOUR_API_KEY\" with your actual API key. Note that the API key should be a string value enclosed in double quotes. Sync your project to apply the changes. In your App class or any other relevant class, access the API key from the BuildConfig class. String apiKey = BuildConfig.API_KEY; Remember to update the value of the API key in your build.gradle file based on your specific requirements and how you handle API key storage and retrieval.","title":"Setup"},{"location":"setup/#setting-up-the-module","text":"Welcome to the module setup guide! This resource's puprpose is to provide step-by-step instructions to quickly implement the module into your project. Enhance functionality, improve user experience, and streamline workflows with ease. For the latest module release, please visit github.com .","title":"Setting up the module"},{"location":"setup/#setting-up-with-gradle","text":"Add the module to your project next to the application folder, and add the following line of code to the grade.build file. dependencies { implementation project(':moderation') ... }","title":"Setting up with gradle"},{"location":"setup/#initialization","text":"","title":"Initialization"},{"location":"setup/#initialization-from-application","text":"Create an App class that extends AppParent. public class App extends AppParent { // Class implementation goes here } Implement the function to return the API key. public class App extends AppParent { // Other class methods and configurations /** * Retrieves the API key. * * @return The API key. */ public static String getApiKey() { // TODO: Implement the logic to retrieve the API key return \"YOUR_API_KEY\"; } } Replace \"YOUR_API_KEY\" with the actual implementation to fetch the API key dynamically.","title":"Initialization from Application"},{"location":"setup/#initialization-from-mainactivity","text":"In your MainActivity class, import the necessary classes. Inside the onCreate() method of MainActivity, initialize the module and retrieve the API key. Moderator moderator; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); // Other initialization code // Initialize the module moderator = Moderator.get(this); // Retrieve the API key from the App class String apiKey = \"YOUR_API_KEY\"; // Set the API key in the module moderator.setOpenaiApiKey(apiKey); }","title":"Initialization from MainActivity"},{"location":"setup/#setting-the-api-key-from-build-config","text":"Setting the api key from a BuildConfig is a good practice to ensure a more secured credentials. To set the API key from a BuildConfig class, follow these steps: Open your module's build.gradle file. Inside the android block, add a buildConfigField to define the API key as a build configuration field. android { defaultConfig { ... buildConfigField(\"String\", \"API_KEY\", \"\\\"YOUR_API_KEY\\\"\") } } Replace \"YOUR_API_KEY\" with your actual API key. Note that the API key should be a string value enclosed in double quotes. Sync your project to apply the changes. In your App class or any other relevant class, access the API key from the BuildConfig class. String apiKey = BuildConfig.API_KEY; Remember to update the value of the API key in your build.gradle file based on your specific requirements and how you handle API key storage and retrieval.","title":"Setting the API key from build config"}]}